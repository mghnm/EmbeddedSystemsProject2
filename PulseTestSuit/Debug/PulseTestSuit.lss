
PulseTestSuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114d  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000732  00000000  00000000  00002546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000950  00000000  00000000  000034e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 8b 04 	jmp	0x916	; 0x916 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART0>:
}

//Read sensor takes in the latest value stored in the sensors array at the specified index and returns it. This value is updated via the ADC_vect interrupt.
uint16_t readSensor(uint8_t analogPin){
	return sensorValues[analogPin + 1];
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <initializePWM>:
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 66       	ori	r24, 0x60	; 96
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	17 bc       	out	0x27, r1	; 39
  d2:	18 bc       	out	0x28, r1	; 40
  d4:	84 b5       	in	r24, 0x24	; 36
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	84 bd       	out	0x24, r24	; 36
  da:	84 b5       	in	r24, 0x24	; 36
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	84 bd       	out	0x24, r24	; 36
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	84 bd       	out	0x24, r24	; 36
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	85 bd       	out	0x25, r24	; 37
  ec:	08 95       	ret

000000ee <initializeMotors>:
  ee:	0e 94 65 00 	call	0xca	; 0xca <initializePWM>
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	84 69       	ori	r24, 0x94	; 148
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	20 9a       	sbi	0x04, 0	; 4
  fa:	08 95       	ret

000000fc <leftFwd>:
  fc:	5a 9a       	sbi	0x0b, 2	; 11
  fe:	5c 98       	cbi	0x0b, 4	; 11
 100:	88 bd       	out	0x28, r24	; 40
 102:	08 95       	ret

00000104 <leftRev>:
 104:	5a 98       	cbi	0x0b, 2	; 11
 106:	5c 9a       	sbi	0x0b, 4	; 11
 108:	88 bd       	out	0x28, r24	; 40
 10a:	08 95       	ret

0000010c <rightFwd>:
 10c:	5f 9a       	sbi	0x0b, 7	; 11
 10e:	28 98       	cbi	0x05, 0	; 5
 110:	87 bd       	out	0x27, r24	; 39
 112:	08 95       	ret

00000114 <rightRev>:
 114:	5f 98       	cbi	0x0b, 7	; 11
 116:	28 9a       	sbi	0x05, 0	; 5
 118:	87 bd       	out	0x27, r24	; 39
 11a:	08 95       	ret

0000011c <rightMotor>:
 11c:	18 16       	cp	r1, r24
 11e:	19 06       	cpc	r1, r25
 120:	5c f4       	brge	.+22     	; 0x138 <rightMotor+0x1c>
 122:	9c 01       	movw	r18, r24
 124:	99 23       	and	r25, r25
 126:	24 f4       	brge	.+8      	; 0x130 <rightMotor+0x14>
 128:	22 27       	eor	r18, r18
 12a:	33 27       	eor	r19, r19
 12c:	28 1b       	sub	r18, r24
 12e:	39 0b       	sbc	r19, r25
 130:	82 2f       	mov	r24, r18
 132:	0e 94 86 00 	call	0x10c	; 0x10c <rightFwd>
 136:	08 95       	ret
 138:	9c 01       	movw	r18, r24
 13a:	99 23       	and	r25, r25
 13c:	24 f4       	brge	.+8      	; 0x146 <rightMotor+0x2a>
 13e:	22 27       	eor	r18, r18
 140:	33 27       	eor	r19, r19
 142:	28 1b       	sub	r18, r24
 144:	39 0b       	sbc	r19, r25
 146:	82 2f       	mov	r24, r18
 148:	0e 94 8a 00 	call	0x114	; 0x114 <rightRev>
 14c:	08 95       	ret

0000014e <leftMotor>:
 14e:	18 16       	cp	r1, r24
 150:	19 06       	cpc	r1, r25
 152:	5c f4       	brge	.+22     	; 0x16a <leftMotor+0x1c>
 154:	9c 01       	movw	r18, r24
 156:	99 23       	and	r25, r25
 158:	24 f4       	brge	.+8      	; 0x162 <leftMotor+0x14>
 15a:	22 27       	eor	r18, r18
 15c:	33 27       	eor	r19, r19
 15e:	28 1b       	sub	r18, r24
 160:	39 0b       	sbc	r19, r25
 162:	82 2f       	mov	r24, r18
 164:	0e 94 82 00 	call	0x104	; 0x104 <leftRev>
 168:	08 95       	ret
 16a:	9c 01       	movw	r18, r24
 16c:	99 23       	and	r25, r25
 16e:	24 f4       	brge	.+8      	; 0x178 <leftMotor+0x2a>
 170:	22 27       	eor	r18, r18
 172:	33 27       	eor	r19, r19
 174:	28 1b       	sub	r18, r24
 176:	39 0b       	sbc	r19, r25
 178:	82 2f       	mov	r24, r18
 17a:	0e 94 7e 00 	call	0xfc	; 0xfc <leftFwd>
 17e:	08 95       	ret

00000180 <__vector_18>:
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1a6:	82 34       	cpi	r24, 0x42	; 66
 1a8:	41 f0       	breq	.+16     	; 0x1ba <__vector_18+0x3a>
 1aa:	83 34       	cpi	r24, 0x43	; 67
 1ac:	c1 f0       	breq	.+48     	; 0x1de <__vector_18+0x5e>
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	09 f5       	brne	.+66     	; 0x1f4 <__vector_18+0x74>
 1b2:	81 e3       	ldi	r24, 0x31	; 49
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1b8:	1d c0       	rjmp	.+58     	; 0x1f4 <__vector_18+0x74>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 a7 00 	call	0x14e	; 0x14e <leftMotor>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 8e 00 	call	0x11c	; 0x11c <rightMotor>
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	83 e2       	ldi	r24, 0x23	; 35
 1ce:	94 ef       	ldi	r25, 0xF4	; 244
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <__vector_18+0x50>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <__vector_18+0x5a>
 1da:	00 00       	nop
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <__vector_18+0x74>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 a7 00 	call	0x14e	; 0x14e <leftMotor>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 8e 00 	call	0x11c	; 0x11c <rightMotor>
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <selectChannel>:
 216:	ec e7       	ldi	r30, 0x7C	; 124
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	90 7e       	andi	r25, 0xE0	; 224
 21e:	8f 71       	andi	r24, 0x1F	; 31
 220:	89 2b       	or	r24, r25
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <startConversion>:

//For convenience startConversion is used instead of the bit maths.
void startConversion(){
	ADCSRA |= (1 << ADSC);
 226:	ea e7       	ldi	r30, 0x7A	; 122
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
 230:	08 95       	ret

00000232 <__vector_21>:
volatile uint8_t currentAnalogChannel = OPTICAL_FRONT;

//volatile uint8_t currentAnalogChannel = OPTICAL_FRONT;

//Interrupt service routine to update the sensor value array continuously using interrupts
ISR(ADC_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	
	
	//There is a simple logic change that would allow up to 6 sensors 0-5 analog pins
	
	if(currentAnalogChannel > OPTICAL_RIGHT){
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <currentAnalogChannel>
 258:	86 30       	cpi	r24, 0x06	; 6
 25a:	18 f0       	brcs	.+6      	; 0x262 <__vector_21+0x30>
		currentAnalogChannel = OPTICAL_FRONT;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <currentAnalogChannel>
		} else {}
		
		
		
		selectChannel(currentAnalogChannel);
 262:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <currentAnalogChannel>
 266:	0e 94 0b 01 	call	0x216	; 0x216 <selectChannel>
		sensorValues[currentAnalogChannel] = ADCW;
 26a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <currentAnalogChannel>
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 274:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	ee 5f       	subi	r30, 0xFE	; 254
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	91 83       	std	Z+1, r25	; 0x01
 282:	80 83       	st	Z, r24
		currentAnalogChannel++;
 284:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <currentAnalogChannel>
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <currentAnalogChannel>
		startConversion();
 28e:	0e 94 13 01 	call	0x226	; 0x226 <startConversion>
		
		
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <initializeADC>:
}

//Initializes the ADC registers to support the IR and optical sensors.
void initializeADC(){
	//Configure the ADMUX for AVCC as input (internal 5v reference) / not left adjusted results (10-bit resolution) / ADC0 as input / 0b0100:0000
	ADMUX = 0x40;
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Configure ADCSRA for enable ADC / don't start conversion / prescaler 128 / disable auto-trigger / enable ADC interrupt 0b10001:111
	ADCSRA = 0x8F;
 2ba:	8f e8       	ldi	r24, 0x8F	; 143
 2bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
					
	selectChannel(OPTICAL_FRONT);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 0b 01 	call	0x216	; 0x216 <selectChannel>
	sei();
 2c6:	78 94       	sei
	startConversion();
 2c8:	0e 94 13 01 	call	0x226	; 0x226 <startConversion>
 2cc:	08 95       	ret

000002ce <main>:

/* ****************************** Start of main *****************************/

int main(void){
	
	initUART0();
 2ce:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART0>
	initializeMotors();
 2d2:	0e 94 77 00 	call	0xee	; 0xee <initializeMotors>
	initializeADC();
 2d6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initializeADC>
	DDRB =	0b11111111;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	84 b9       	out	0x04, r24	; 4
	float leftSpeed;
	float rightSpeed;
	int counter = 0;
	float cycleCounter = 0;
	int onTheBlack = 0;
	int onTheWhite = 0;
 2de:	21 2c       	mov	r2, r1
 2e0:	31 2c       	mov	r3, r1
	float comp;
	float leftSpeed;
	float rightSpeed;
	int counter = 0;
	float cycleCounter = 0;
	int onTheBlack = 0;
 2e2:	e1 2c       	mov	r14, r1
 2e4:	f1 2c       	mov	r15, r1
	float target=60;
	float ISpeed =255;
	float comp;
	float leftSpeed;
	float rightSpeed;
	int counter = 0;
 2e6:	c1 2c       	mov	r12, r1
 2e8:	d1 2c       	mov	r13, r1
	ADMUX = (ADMUX & 0xE0) | (analogPin & 0x1F);   //select channel (MUX0-4 bits)
}

//Read sensor takes in the latest value stored in the sensors array at the specified index and returns it. This value is updated via the ADC_vect interrupt.
uint16_t readSensor(uint8_t analogPin){
	return sensorValues[analogPin + 1];
 2ea:	c2 e0       	ldi	r28, 0x02	; 2
 2ec:	d1 e0       	ldi	r29, 0x01	; 1
 2ee:	0e 81       	ldd	r16, Y+6	; 0x06
 2f0:	1f 81       	ldd	r17, Y+7	; 0x07
 2f2:	8c 81       	ldd	r24, Y+4	; 0x04
 2f4:	9d 81       	ldd	r25, Y+5	; 0x05

	while(1){	
				
		sensor = readSensor(IR_LEFT);
		disSensor = readSensor(OPTICAL_FRONT);
		comp = (sensor/target);
 2f6:	b8 01       	movw	r22, r16
 2f8:	01 2e       	mov	r0, r17
 2fa:	00 0c       	add	r0, r0
 2fc:	88 0b       	sbc	r24, r24
 2fe:	99 0b       	sbc	r25, r25
 300:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatsisf>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e7       	ldi	r20, 0x70	; 112
 30a:	52 e4       	ldi	r21, 0x42	; 66
 30c:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 310:	4b 01       	movw	r8, r22
 312:	5c 01       	movw	r10, r24
	ADMUX = (ADMUX & 0xE0) | (analogPin & 0x1F);   //select channel (MUX0-4 bits)
}

//Read sensor takes in the latest value stored in the sensors array at the specified index and returns it. This value is updated via the ADC_vect interrupt.
uint16_t readSensor(uint8_t analogPin){
	return sensorValues[analogPin + 1];
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	9d 81       	ldd	r25, Y+5	; 0x05
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	9d 81       	ldd	r25, Y+5	; 0x05
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	9d 81       	ldd	r25, Y+5	; 0x05
 324:	8c 81       	ldd	r24, Y+4	; 0x04
 326:	9d 81       	ldd	r25, Y+5	; 0x05
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	9d 81       	ldd	r25, Y+5	; 0x05
 32c:	8c 81       	ldd	r24, Y+4	; 0x04
 32e:	9d 81       	ldd	r25, Y+5	; 0x05
		derogative = error - lastError;
		lastError=error;
		
		
		//Check if bot is over the black line and if yeas increase the counter
		if ((onTheBlack == 0) && (sensor > 800)){
 330:	e1 14       	cp	r14, r1
 332:	f1 04       	cpc	r15, r1
 334:	59 f4       	brne	.+22     	; 0x34c <main+0x7e>
 336:	01 32       	cpi	r16, 0x21	; 33
 338:	23 e0       	ldi	r18, 0x03	; 3
 33a:	12 07       	cpc	r17, r18
 33c:	3c f0       	brlt	.+14     	; 0x34c <main+0x7e>
			onTheBlack = 1;   onTheWhite= 0; counter++;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	c8 1a       	sub	r12, r24
 342:	d8 0a       	sbc	r13, r24
 344:	ee 24       	eor	r14, r14
 346:	e3 94       	inc	r14
 348:	f1 2c       	mov	r15, r1
 34a:	03 c0       	rjmp	.+6      	; 0x352 <main+0x84>
		} 
		
		//Check if bot is over the white line and if yeas increase the counter
		if ((onTheWhite == 0) && (sensor < 55)) {
 34c:	21 14       	cp	r2, r1
 34e:	31 04       	cpc	r3, r1
 350:	71 f4       	brne	.+28     	; 0x36e <main+0xa0>
 352:	07 33       	cpi	r16, 0x37	; 55
 354:	11 05       	cpc	r17, r1
 356:	4c f4       	brge	.+18     	; 0x36a <main+0x9c>
			onTheBlack = 0; onTheWhite = 1; counter++;
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	c9 1a       	sub	r12, r25
 35c:	d9 0a       	sbc	r13, r25
 35e:	22 24       	eor	r2, r2
 360:	23 94       	inc	r2
 362:	31 2c       	mov	r3, r1
 364:	e1 2c       	mov	r14, r1
 366:	f1 2c       	mov	r15, r1
 368:	02 c0       	rjmp	.+4      	; 0x36e <main+0xa0>
 36a:	21 2c       	mov	r2, r1
 36c:	31 2c       	mov	r3, r1
		} 
		
		if (counter == 4 ) {
 36e:	24 e0       	ldi	r18, 0x04	; 4
 370:	c2 16       	cp	r12, r18
 372:	d1 04       	cpc	r13, r1
 374:	99 f4       	brne	.+38     	; 0x39c <main+0xce>
			 leftMotor(0); rightMotor(0); _delay_ms(2000); target = target + 0; counter = 0;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 a7 00 	call	0x14e	; 0x14e <leftMotor>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 8e 00 	call	0x11c	; 0x11c <rightMotor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	97 ea       	ldi	r25, 0xA7	; 167
 38a:	21 e6       	ldi	r18, 0x61	; 97
 38c:	81 50       	subi	r24, 0x01	; 1
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	20 40       	sbci	r18, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0xbe>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0xc8>
 396:	00 00       	nop
 398:	c1 2c       	mov	r12, r1
 39a:	d1 2c       	mov	r13, r1
		}
		
		
		leftSpeed = ((ISpeed*comp)*0.8) + ((integral*0,2) - (derogative*0,2));
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	4f e7       	ldi	r20, 0x7F	; 127
 3a2:	53 e4       	ldi	r21, 0x43	; 67
 3a4:	c5 01       	movw	r24, r10
 3a6:	b4 01       	movw	r22, r8
 3a8:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 3ac:	2d ec       	ldi	r18, 0xCD	; 205
 3ae:	3c ec       	ldi	r19, 0xCC	; 204
 3b0:	4c e4       	ldi	r20, 0x4C	; 76
 3b2:	5f e3       	ldi	r21, 0x3F	; 63
 3b4:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	0e 94 4e 02 	call	0x49c	; 0x49c <__addsf3>
 3c2:	2b 01       	movw	r4, r22
 3c4:	3c 01       	movw	r6, r24
		rightSpeed = ((ISpeed/comp)*0.8) - ((integral*0,2) + (derogative*0,2));
 3c6:	a5 01       	movw	r20, r10
 3c8:	94 01       	movw	r18, r8
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	8f e7       	ldi	r24, 0x7F	; 127
 3d0:	93 e4       	ldi	r25, 0x43	; 67
 3d2:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 3d6:	2d ec       	ldi	r18, 0xCD	; 205
 3d8:	3c ec       	ldi	r19, 0xCC	; 204
 3da:	4c e4       	ldi	r20, 0x4C	; 76
 3dc:	5f e3       	ldi	r21, 0x3F	; 63
 3de:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	50 e4       	ldi	r21, 0x40	; 64
 3ea:	0e 94 4d 02 	call	0x49a	; 0x49a <__subsf3>
 3ee:	4b 01       	movw	r8, r22
 3f0:	5c 01       	movw	r10, r24
		if (leftSpeed > 255) {leftSpeed = 255;}
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	4f e7       	ldi	r20, 0x7F	; 127
 3f8:	53 e4       	ldi	r21, 0x43	; 67
 3fa:	c3 01       	movw	r24, r6
 3fc:	b2 01       	movw	r22, r4
 3fe:	0e 94 19 04 	call	0x832	; 0x832 <__gesf2>
 402:	18 16       	cp	r1, r24
 404:	74 f0       	brlt	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		if (leftSpeed < 50) {leftSpeed = 0;}
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	48 e4       	ldi	r20, 0x48	; 72
 40c:	52 e4       	ldi	r21, 0x42	; 66
 40e:	c3 01       	movw	r24, r6
 410:	b2 01       	movw	r22, r4
 412:	0e 94 ba 02 	call	0x574	; 0x574 <__cmpsf2>
 416:	88 23       	and	r24, r24
 418:	64 f4       	brge	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41a:	41 2c       	mov	r4, r1
 41c:	51 2c       	mov	r5, r1
 41e:	32 01       	movw	r6, r4
 420:	08 c0       	rjmp	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		}
		
		
		leftSpeed = ((ISpeed*comp)*0.8) + ((integral*0,2) - (derogative*0,2));
		rightSpeed = ((ISpeed/comp)*0.8) - ((integral*0,2) + (derogative*0,2));
		if (leftSpeed > 255) {leftSpeed = 255;}
 422:	0f 2e       	mov	r0, r31
 424:	41 2c       	mov	r4, r1
 426:	51 2c       	mov	r5, r1
 428:	ff e7       	ldi	r31, 0x7F	; 127
 42a:	6f 2e       	mov	r6, r31
 42c:	f3 e4       	ldi	r31, 0x43	; 67
 42e:	7f 2e       	mov	r7, r31
 430:	f0 2d       	mov	r31, r0
		if (leftSpeed < 50) {leftSpeed = 0;}
		if (rightSpeed > 255) {rightSpeed = 255;}
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	4f e7       	ldi	r20, 0x7F	; 127
 438:	53 e4       	ldi	r21, 0x43	; 67
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	0e 94 19 04 	call	0x832	; 0x832 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	74 f0       	brlt	.+28     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		if (rightSpeed < 50) {rightSpeed = 0;}
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	48 e4       	ldi	r20, 0x48	; 72
 44c:	52 e4       	ldi	r21, 0x42	; 66
 44e:	c5 01       	movw	r24, r10
 450:	b4 01       	movw	r22, r8
 452:	0e 94 ba 02 	call	0x574	; 0x574 <__cmpsf2>
 456:	88 23       	and	r24, r24
 458:	64 f4       	brge	.+24     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 45a:	81 2c       	mov	r8, r1
 45c:	91 2c       	mov	r9, r1
 45e:	54 01       	movw	r10, r8
 460:	08 c0       	rjmp	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		
		leftSpeed = ((ISpeed*comp)*0.8) + ((integral*0,2) - (derogative*0,2));
		rightSpeed = ((ISpeed/comp)*0.8) - ((integral*0,2) + (derogative*0,2));
		if (leftSpeed > 255) {leftSpeed = 255;}
		if (leftSpeed < 50) {leftSpeed = 0;}
		if (rightSpeed > 255) {rightSpeed = 255;}
 462:	0f 2e       	mov	r0, r31
 464:	81 2c       	mov	r8, r1
 466:	91 2c       	mov	r9, r1
 468:	ff e7       	ldi	r31, 0x7F	; 127
 46a:	af 2e       	mov	r10, r31
 46c:	f3 e4       	ldi	r31, 0x43	; 67
 46e:	bf 2e       	mov	r11, r31
 470:	f0 2d       	mov	r31, r0
		if (rightSpeed < 50) {rightSpeed = 0;}
			
		if (run == '1'){
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 476:	81 33       	cpi	r24, 0x31	; 49
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	39 cf       	rjmp	.-398    	; 0x2ee <main+0x20>
				
		leftMotor(leftSpeed);
 47c:	c3 01       	movw	r24, r6
 47e:	b2 01       	movw	r22, r4
 480:	0e 94 31 03 	call	0x662	; 0x662 <__fixsfsi>
 484:	cb 01       	movw	r24, r22
 486:	0e 94 a7 00 	call	0x14e	; 0x14e <leftMotor>
		rightMotor(rightSpeed);
 48a:	c5 01       	movw	r24, r10
 48c:	b4 01       	movw	r22, r8
 48e:	0e 94 31 03 	call	0x662	; 0x662 <__fixsfsi>
 492:	cb 01       	movw	r24, r22
 494:	0e 94 8e 00 	call	0x11c	; 0x11c <rightMotor>
 498:	2a cf       	rjmp	.-428    	; 0x2ee <main+0x20>

0000049a <__subsf3>:
 49a:	50 58       	subi	r21, 0x80	; 128

0000049c <__addsf3>:
 49c:	bb 27       	eor	r27, r27
 49e:	aa 27       	eor	r26, r26
 4a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <__addsf3x>
 4a4:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_round>
 4a8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_pscA>
 4ac:	38 f0       	brcs	.+14     	; 0x4bc <__addsf3+0x20>
 4ae:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_pscB>
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__addsf3+0x20>
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <__addsf3+0x28>
 4b6:	9f 3f       	cpi	r25, 0xFF	; 255
 4b8:	19 f4       	brne	.+6      	; 0x4c0 <__addsf3+0x24>
 4ba:	26 f4       	brtc	.+8      	; 0x4c4 <__addsf3+0x28>
 4bc:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_nan>
 4c0:	0e f4       	brtc	.+2      	; 0x4c4 <__addsf3+0x28>
 4c2:	e0 95       	com	r30
 4c4:	e7 fb       	bst	r30, 7
 4c6:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_inf>

000004ca <__addsf3x>:
 4ca:	e9 2f       	mov	r30, r25
 4cc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fp_split3>
 4d0:	58 f3       	brcs	.-42     	; 0x4a8 <__addsf3+0xc>
 4d2:	ba 17       	cp	r27, r26
 4d4:	62 07       	cpc	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	95 07       	cpc	r25, r21
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__addsf3x+0x1c>
 4de:	79 f4       	brne	.+30     	; 0x4fe <__addsf3x+0x34>
 4e0:	a6 f5       	brtc	.+104    	; 0x54a <__addsf3x+0x80>
 4e2:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_zero>
 4e6:	0e f4       	brtc	.+2      	; 0x4ea <__addsf3x+0x20>
 4e8:	e0 95       	com	r30
 4ea:	0b 2e       	mov	r0, r27
 4ec:	ba 2f       	mov	r27, r26
 4ee:	a0 2d       	mov	r26, r0
 4f0:	0b 01       	movw	r0, r22
 4f2:	b9 01       	movw	r22, r18
 4f4:	90 01       	movw	r18, r0
 4f6:	0c 01       	movw	r0, r24
 4f8:	ca 01       	movw	r24, r20
 4fa:	a0 01       	movw	r20, r0
 4fc:	11 24       	eor	r1, r1
 4fe:	ff 27       	eor	r31, r31
 500:	59 1b       	sub	r21, r25
 502:	99 f0       	breq	.+38     	; 0x52a <__addsf3x+0x60>
 504:	59 3f       	cpi	r21, 0xF9	; 249
 506:	50 f4       	brcc	.+20     	; 0x51c <__addsf3x+0x52>
 508:	50 3e       	cpi	r21, 0xE0	; 224
 50a:	68 f1       	brcs	.+90     	; 0x566 <__addsf3x+0x9c>
 50c:	1a 16       	cp	r1, r26
 50e:	f0 40       	sbci	r31, 0x00	; 0
 510:	a2 2f       	mov	r26, r18
 512:	23 2f       	mov	r18, r19
 514:	34 2f       	mov	r19, r20
 516:	44 27       	eor	r20, r20
 518:	58 5f       	subi	r21, 0xF8	; 248
 51a:	f3 cf       	rjmp	.-26     	; 0x502 <__addsf3x+0x38>
 51c:	46 95       	lsr	r20
 51e:	37 95       	ror	r19
 520:	27 95       	ror	r18
 522:	a7 95       	ror	r26
 524:	f0 40       	sbci	r31, 0x00	; 0
 526:	53 95       	inc	r21
 528:	c9 f7       	brne	.-14     	; 0x51c <__addsf3x+0x52>
 52a:	7e f4       	brtc	.+30     	; 0x54a <__addsf3x+0x80>
 52c:	1f 16       	cp	r1, r31
 52e:	ba 0b       	sbc	r27, r26
 530:	62 0b       	sbc	r22, r18
 532:	73 0b       	sbc	r23, r19
 534:	84 0b       	sbc	r24, r20
 536:	ba f0       	brmi	.+46     	; 0x566 <__addsf3x+0x9c>
 538:	91 50       	subi	r25, 0x01	; 1
 53a:	a1 f0       	breq	.+40     	; 0x564 <__addsf3x+0x9a>
 53c:	ff 0f       	add	r31, r31
 53e:	bb 1f       	adc	r27, r27
 540:	66 1f       	adc	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	c2 f7       	brpl	.-16     	; 0x538 <__addsf3x+0x6e>
 548:	0e c0       	rjmp	.+28     	; 0x566 <__addsf3x+0x9c>
 54a:	ba 0f       	add	r27, r26
 54c:	62 1f       	adc	r22, r18
 54e:	73 1f       	adc	r23, r19
 550:	84 1f       	adc	r24, r20
 552:	48 f4       	brcc	.+18     	; 0x566 <__addsf3x+0x9c>
 554:	87 95       	ror	r24
 556:	77 95       	ror	r23
 558:	67 95       	ror	r22
 55a:	b7 95       	ror	r27
 55c:	f7 95       	ror	r31
 55e:	9e 3f       	cpi	r25, 0xFE	; 254
 560:	08 f0       	brcs	.+2      	; 0x564 <__addsf3x+0x9a>
 562:	b0 cf       	rjmp	.-160    	; 0x4c4 <__addsf3+0x28>
 564:	93 95       	inc	r25
 566:	88 0f       	add	r24, r24
 568:	08 f0       	brcs	.+2      	; 0x56c <__addsf3x+0xa2>
 56a:	99 27       	eor	r25, r25
 56c:	ee 0f       	add	r30, r30
 56e:	97 95       	ror	r25
 570:	87 95       	ror	r24
 572:	08 95       	ret

00000574 <__cmpsf2>:
 574:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_cmp>
 578:	08 f4       	brcc	.+2      	; 0x57c <__cmpsf2+0x8>
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret

0000057e <__divsf3>:
 57e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__divsf3x>
 582:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_round>
 586:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_pscB>
 58a:	58 f0       	brcs	.+22     	; 0x5a2 <__divsf3+0x24>
 58c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_pscA>
 590:	40 f0       	brcs	.+16     	; 0x5a2 <__divsf3+0x24>
 592:	29 f4       	brne	.+10     	; 0x59e <__divsf3+0x20>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	29 f0       	breq	.+10     	; 0x5a2 <__divsf3+0x24>
 598:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_inf>
 59c:	51 11       	cpse	r21, r1
 59e:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_szero>
 5a2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fp_split3>
 5aa:	68 f3       	brcs	.-38     	; 0x586 <__divsf3+0x8>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__divsf3+0x1e>
 5b0:	55 23       	and	r21, r21
 5b2:	91 f3       	breq	.-28     	; 0x598 <__divsf3+0x1a>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	35 d0       	rcall	.+106    	; 0x63e <__divsf3_pse+0x92>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	32 d0       	rcall	.+100    	; 0x640 <__divsf3_pse+0x94>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	2b d0       	rcall	.+86     	; 0x63e <__divsf3_pse+0x92>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	29 d0       	rcall	.+82     	; 0x63e <__divsf3_pse+0x92>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	3a f0       	brmi	.+14     	; 0x61c <__divsf3_pse+0x70>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	78 f0       	brcs	.+30     	; 0x632 <__divsf3_pse+0x86>
 614:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_inf>
 618:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__divsf3_pse+0x6c>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__divsf3_pse+0x6c>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c9 f7       	brne	.-14     	; 0x624 <__divsf3_pse+0x78>
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret
 63e:	e1 e0       	ldi	r30, 0x01	; 1
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	62 17       	cp	r22, r18
 64a:	73 07       	cpc	r23, r19
 64c:	84 07       	cpc	r24, r20
 64e:	ba 07       	cpc	r27, r26
 650:	20 f0       	brcs	.+8      	; 0x65a <__divsf3_pse+0xae>
 652:	62 1b       	sub	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba 0b       	sbc	r27, r26
 65a:	ee 1f       	adc	r30, r30
 65c:	88 f7       	brcc	.-30     	; 0x640 <__divsf3_pse+0x94>
 65e:	e0 95       	com	r30
 660:	08 95       	ret

00000662 <__fixsfsi>:
 662:	0e 94 38 03 	call	0x670	; 0x670 <__fixunssfsi>
 666:	68 94       	set
 668:	b1 11       	cpse	r27, r1
 66a:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_szero>
 66e:	08 95       	ret

00000670 <__fixunssfsi>:
 670:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fp_splitA>
 674:	88 f0       	brcs	.+34     	; 0x698 <__fixunssfsi+0x28>
 676:	9f 57       	subi	r25, 0x7F	; 127
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__fixunssfsi+0x30>
 67a:	b9 2f       	mov	r27, r25
 67c:	99 27       	eor	r25, r25
 67e:	b7 51       	subi	r27, 0x17	; 23
 680:	b0 f0       	brcs	.+44     	; 0x6ae <__fixunssfsi+0x3e>
 682:	e1 f0       	breq	.+56     	; 0x6bc <__fixunssfsi+0x4c>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	1a f0       	brmi	.+6      	; 0x694 <__fixunssfsi+0x24>
 68e:	ba 95       	dec	r27
 690:	c9 f7       	brne	.-14     	; 0x684 <__fixunssfsi+0x14>
 692:	14 c0       	rjmp	.+40     	; 0x6bc <__fixunssfsi+0x4c>
 694:	b1 30       	cpi	r27, 0x01	; 1
 696:	91 f0       	breq	.+36     	; 0x6bc <__fixunssfsi+0x4c>
 698:	0e 94 12 04 	call	0x824	; 0x824 <__fp_zero>
 69c:	b1 e0       	ldi	r27, 0x01	; 1
 69e:	08 95       	ret
 6a0:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_zero>
 6a4:	67 2f       	mov	r22, r23
 6a6:	78 2f       	mov	r23, r24
 6a8:	88 27       	eor	r24, r24
 6aa:	b8 5f       	subi	r27, 0xF8	; 248
 6ac:	39 f0       	breq	.+14     	; 0x6bc <__fixunssfsi+0x4c>
 6ae:	b9 3f       	cpi	r27, 0xF9	; 249
 6b0:	cc f3       	brlt	.-14     	; 0x6a4 <__fixunssfsi+0x34>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b3 95       	inc	r27
 6ba:	d9 f7       	brne	.-10     	; 0x6b2 <__fixunssfsi+0x42>
 6bc:	3e f4       	brtc	.+14     	; 0x6cc <__fixunssfsi+0x5c>
 6be:	90 95       	com	r25
 6c0:	80 95       	com	r24
 6c2:	70 95       	com	r23
 6c4:	61 95       	neg	r22
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	08 95       	ret

000006ce <__floatunsisf>:
 6ce:	e8 94       	clt
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <__floatsisf+0x12>

000006d2 <__floatsisf>:
 6d2:	97 fb       	bst	r25, 7
 6d4:	3e f4       	brtc	.+14     	; 0x6e4 <__floatsisf+0x12>
 6d6:	90 95       	com	r25
 6d8:	80 95       	com	r24
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	99 23       	and	r25, r25
 6e6:	a9 f0       	breq	.+42     	; 0x712 <__floatsisf+0x40>
 6e8:	f9 2f       	mov	r31, r25
 6ea:	96 e9       	ldi	r25, 0x96	; 150
 6ec:	bb 27       	eor	r27, r27
 6ee:	93 95       	inc	r25
 6f0:	f6 95       	lsr	r31
 6f2:	87 95       	ror	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b7 95       	ror	r27
 6fa:	f1 11       	cpse	r31, r1
 6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <__floatsisf+0x1c>
 6fe:	fa f4       	brpl	.+62     	; 0x73e <__floatsisf+0x6c>
 700:	bb 0f       	add	r27, r27
 702:	11 f4       	brne	.+4      	; 0x708 <__floatsisf+0x36>
 704:	60 ff       	sbrs	r22, 0
 706:	1b c0       	rjmp	.+54     	; 0x73e <__floatsisf+0x6c>
 708:	6f 5f       	subi	r22, 0xFF	; 255
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	16 c0       	rjmp	.+44     	; 0x73e <__floatsisf+0x6c>
 712:	88 23       	and	r24, r24
 714:	11 f0       	breq	.+4      	; 0x71a <__floatsisf+0x48>
 716:	96 e9       	ldi	r25, 0x96	; 150
 718:	11 c0       	rjmp	.+34     	; 0x73c <__floatsisf+0x6a>
 71a:	77 23       	and	r23, r23
 71c:	21 f0       	breq	.+8      	; 0x726 <__floatsisf+0x54>
 71e:	9e e8       	ldi	r25, 0x8E	; 142
 720:	87 2f       	mov	r24, r23
 722:	76 2f       	mov	r23, r22
 724:	05 c0       	rjmp	.+10     	; 0x730 <__floatsisf+0x5e>
 726:	66 23       	and	r22, r22
 728:	71 f0       	breq	.+28     	; 0x746 <__floatsisf+0x74>
 72a:	96 e8       	ldi	r25, 0x86	; 134
 72c:	86 2f       	mov	r24, r22
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	2a f0       	brmi	.+10     	; 0x73e <__floatsisf+0x6c>
 734:	9a 95       	dec	r25
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	da f7       	brpl	.-10     	; 0x734 <__floatsisf+0x62>
 73e:	88 0f       	add	r24, r24
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <__fp_cmp>:
 748:	99 0f       	add	r25, r25
 74a:	00 08       	sbc	r0, r0
 74c:	55 0f       	add	r21, r21
 74e:	aa 0b       	sbc	r26, r26
 750:	e0 e8       	ldi	r30, 0x80	; 128
 752:	fe ef       	ldi	r31, 0xFE	; 254
 754:	16 16       	cp	r1, r22
 756:	17 06       	cpc	r1, r23
 758:	e8 07       	cpc	r30, r24
 75a:	f9 07       	cpc	r31, r25
 75c:	c0 f0       	brcs	.+48     	; 0x78e <__fp_cmp+0x46>
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	e4 07       	cpc	r30, r20
 764:	f5 07       	cpc	r31, r21
 766:	98 f0       	brcs	.+38     	; 0x78e <__fp_cmp+0x46>
 768:	62 1b       	sub	r22, r18
 76a:	73 0b       	sbc	r23, r19
 76c:	84 0b       	sbc	r24, r20
 76e:	95 0b       	sbc	r25, r21
 770:	39 f4       	brne	.+14     	; 0x780 <__fp_cmp+0x38>
 772:	0a 26       	eor	r0, r26
 774:	61 f0       	breq	.+24     	; 0x78e <__fp_cmp+0x46>
 776:	23 2b       	or	r18, r19
 778:	24 2b       	or	r18, r20
 77a:	25 2b       	or	r18, r21
 77c:	21 f4       	brne	.+8      	; 0x786 <__fp_cmp+0x3e>
 77e:	08 95       	ret
 780:	0a 26       	eor	r0, r26
 782:	09 f4       	brne	.+2      	; 0x786 <__fp_cmp+0x3e>
 784:	a1 40       	sbci	r26, 0x01	; 1
 786:	a6 95       	lsr	r26
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	81 1d       	adc	r24, r1
 78c:	81 1d       	adc	r24, r1
 78e:	08 95       	ret

00000790 <__fp_inf>:
 790:	97 f9       	bld	r25, 7
 792:	9f 67       	ori	r25, 0x7F	; 127
 794:	80 e8       	ldi	r24, 0x80	; 128
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	08 95       	ret

0000079c <__fp_nan>:
 79c:	9f ef       	ldi	r25, 0xFF	; 255
 79e:	80 ec       	ldi	r24, 0xC0	; 192
 7a0:	08 95       	ret

000007a2 <__fp_pscA>:
 7a2:	00 24       	eor	r0, r0
 7a4:	0a 94       	dec	r0
 7a6:	16 16       	cp	r1, r22
 7a8:	17 06       	cpc	r1, r23
 7aa:	18 06       	cpc	r1, r24
 7ac:	09 06       	cpc	r0, r25
 7ae:	08 95       	ret

000007b0 <__fp_pscB>:
 7b0:	00 24       	eor	r0, r0
 7b2:	0a 94       	dec	r0
 7b4:	12 16       	cp	r1, r18
 7b6:	13 06       	cpc	r1, r19
 7b8:	14 06       	cpc	r1, r20
 7ba:	05 06       	cpc	r0, r21
 7bc:	08 95       	ret

000007be <__fp_round>:
 7be:	09 2e       	mov	r0, r25
 7c0:	03 94       	inc	r0
 7c2:	00 0c       	add	r0, r0
 7c4:	11 f4       	brne	.+4      	; 0x7ca <__fp_round+0xc>
 7c6:	88 23       	and	r24, r24
 7c8:	52 f0       	brmi	.+20     	; 0x7de <__fp_round+0x20>
 7ca:	bb 0f       	add	r27, r27
 7cc:	40 f4       	brcc	.+16     	; 0x7de <__fp_round+0x20>
 7ce:	bf 2b       	or	r27, r31
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__fp_round+0x18>
 7d2:	60 ff       	sbrs	r22, 0
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fp_round+0x20>
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__fp_split3>:
 7e0:	57 fd       	sbrc	r21, 7
 7e2:	90 58       	subi	r25, 0x80	; 128
 7e4:	44 0f       	add	r20, r20
 7e6:	55 1f       	adc	r21, r21
 7e8:	59 f0       	breq	.+22     	; 0x800 <__fp_splitA+0x10>
 7ea:	5f 3f       	cpi	r21, 0xFF	; 255
 7ec:	71 f0       	breq	.+28     	; 0x80a <__fp_splitA+0x1a>
 7ee:	47 95       	ror	r20

000007f0 <__fp_splitA>:
 7f0:	88 0f       	add	r24, r24
 7f2:	97 fb       	bst	r25, 7
 7f4:	99 1f       	adc	r25, r25
 7f6:	61 f0       	breq	.+24     	; 0x810 <__fp_splitA+0x20>
 7f8:	9f 3f       	cpi	r25, 0xFF	; 255
 7fa:	79 f0       	breq	.+30     	; 0x81a <__fp_splitA+0x2a>
 7fc:	87 95       	ror	r24
 7fe:	08 95       	ret
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	55 1f       	adc	r21, r21
 808:	f2 cf       	rjmp	.-28     	; 0x7ee <__fp_split3+0xe>
 80a:	46 95       	lsr	r20
 80c:	f1 df       	rcall	.-30     	; 0x7f0 <__fp_splitA>
 80e:	08 c0       	rjmp	.+16     	; 0x820 <__fp_splitA+0x30>
 810:	16 16       	cp	r1, r22
 812:	17 06       	cpc	r1, r23
 814:	18 06       	cpc	r1, r24
 816:	99 1f       	adc	r25, r25
 818:	f1 cf       	rjmp	.-30     	; 0x7fc <__fp_splitA+0xc>
 81a:	86 95       	lsr	r24
 81c:	71 05       	cpc	r23, r1
 81e:	61 05       	cpc	r22, r1
 820:	08 94       	sec
 822:	08 95       	ret

00000824 <__fp_zero>:
 824:	e8 94       	clt

00000826 <__fp_szero>:
 826:	bb 27       	eor	r27, r27
 828:	66 27       	eor	r22, r22
 82a:	77 27       	eor	r23, r23
 82c:	cb 01       	movw	r24, r22
 82e:	97 f9       	bld	r25, 7
 830:	08 95       	ret

00000832 <__gesf2>:
 832:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_cmp>
 836:	08 f4       	brcc	.+2      	; 0x83a <__gesf2+0x8>
 838:	8f ef       	ldi	r24, 0xFF	; 255
 83a:	08 95       	ret

0000083c <__mulsf3>:
 83c:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3x>
 840:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_round>
 844:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_pscA>
 848:	38 f0       	brcs	.+14     	; 0x858 <__mulsf3+0x1c>
 84a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_pscB>
 84e:	20 f0       	brcs	.+8      	; 0x858 <__mulsf3+0x1c>
 850:	95 23       	and	r25, r21
 852:	11 f0       	breq	.+4      	; 0x858 <__mulsf3+0x1c>
 854:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_inf>
 858:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_nan>
 85c:	11 24       	eor	r1, r1
 85e:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_szero>

00000862 <__mulsf3x>:
 862:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fp_split3>
 866:	70 f3       	brcs	.-36     	; 0x844 <__mulsf3+0x8>

00000868 <__mulsf3_pse>:
 868:	95 9f       	mul	r25, r21
 86a:	c1 f3       	breq	.-16     	; 0x85c <__mulsf3+0x20>
 86c:	95 0f       	add	r25, r21
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	55 1f       	adc	r21, r21
 872:	62 9f       	mul	r22, r18
 874:	f0 01       	movw	r30, r0
 876:	72 9f       	mul	r23, r18
 878:	bb 27       	eor	r27, r27
 87a:	f0 0d       	add	r31, r0
 87c:	b1 1d       	adc	r27, r1
 87e:	63 9f       	mul	r22, r19
 880:	aa 27       	eor	r26, r26
 882:	f0 0d       	add	r31, r0
 884:	b1 1d       	adc	r27, r1
 886:	aa 1f       	adc	r26, r26
 888:	64 9f       	mul	r22, r20
 88a:	66 27       	eor	r22, r22
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	66 1f       	adc	r22, r22
 892:	82 9f       	mul	r24, r18
 894:	22 27       	eor	r18, r18
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	62 1f       	adc	r22, r18
 89c:	73 9f       	mul	r23, r19
 89e:	b0 0d       	add	r27, r0
 8a0:	a1 1d       	adc	r26, r1
 8a2:	62 1f       	adc	r22, r18
 8a4:	83 9f       	mul	r24, r19
 8a6:	a0 0d       	add	r26, r0
 8a8:	61 1d       	adc	r22, r1
 8aa:	22 1f       	adc	r18, r18
 8ac:	74 9f       	mul	r23, r20
 8ae:	33 27       	eor	r19, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	23 1f       	adc	r18, r19
 8b6:	84 9f       	mul	r24, r20
 8b8:	60 0d       	add	r22, r0
 8ba:	21 1d       	adc	r18, r1
 8bc:	82 2f       	mov	r24, r18
 8be:	76 2f       	mov	r23, r22
 8c0:	6a 2f       	mov	r22, r26
 8c2:	11 24       	eor	r1, r1
 8c4:	9f 57       	subi	r25, 0x7F	; 127
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	9a f0       	brmi	.+38     	; 0x8f0 <__mulsf3_pse+0x88>
 8ca:	f1 f0       	breq	.+60     	; 0x908 <__stack+0x9>
 8cc:	88 23       	and	r24, r24
 8ce:	4a f0       	brmi	.+18     	; 0x8e2 <__mulsf3_pse+0x7a>
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	bb 1f       	adc	r27, r27
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__mulsf3_pse+0x64>
 8e2:	9e 3f       	cpi	r25, 0xFE	; 254
 8e4:	51 05       	cpc	r21, r1
 8e6:	80 f0       	brcs	.+32     	; 0x908 <__stack+0x9>
 8e8:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_inf>
 8ec:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_szero>
 8f0:	5f 3f       	cpi	r21, 0xFF	; 255
 8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__mulsf3_pse+0x84>
 8f4:	98 3e       	cpi	r25, 0xE8	; 232
 8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__mulsf3_pse+0x84>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	e7 95       	ror	r30
 904:	9f 5f       	subi	r25, 0xFF	; 255
 906:	c1 f7       	brne	.-16     	; 0x8f8 <__mulsf3_pse+0x90>
 908:	fe 2b       	or	r31, r30
 90a:	88 0f       	add	r24, r24
 90c:	91 1d       	adc	r25, r1
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
